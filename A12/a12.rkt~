#lang racket
(require "monads.rkt")


; Problem - 1

#|
(defrel listo (list)
  (conde ((nullo list) +succeed+)
         ((pairo list)
          (fresh (d)
            (cdro list d)
            (listo d)))
         (else +fail+)))
|#

#|
(defrel (caro ls a)
  (fresh (d)
    (== (cons a d) ls)))

(defrel (cdro ls d)
  (fresh (a)
    (== (cons a d) ls)))

(defrel (conso a d ls)
  (== (cons a d) ls))

(defrel (nullo x)
  (conde
  (== '() x)))

(define (pairo ls)
  (fresh (a d)
    (conso a d ls)))

(defrel (listo l o)
  (conde
    ((nullo l))
    ((pairo l)
     (fresh (d)
       (cdro l d)
       (listo d o)))))

(run! 1 q (listo '(a b c d e) q))
(run! 1 q (listo '(a b c d . e) q))
(run! 4 q (listo q q))
(run! 4 q (listo `(a b ,q) q))
|#

(define (findf-maybe p ls)
  (cond
    [(null? ls) (Nothing)]
    [(p (car ls)) (Just (car ls))]
    [else (findf-maybe p (cdr ls))]))

(findf-maybe symbol? '(1 2 c))
(findf-maybe boolean? '(#f 1 2 c)) 
(findf-maybe number? '(a b c))

(define (partition-writer p ls)
  (cond
    [(null? ls) (inj-writer '())]
    [(p (car ls)) (go-on
                      (part-d <- (partition-writer p (cdr ls)))
                    (inj-writer  `(,(car ls) . ,part-d)))]
    [else (go-on
              (dan-friedman <- (tell (car ls)))
               (part-d <-(partition-writer p (cdr ls)))
            (inj-writer part-d))]))

(run-writer (partition-writer even? '(1 2 3 4 5 6 7 8 9 10)))
(run-writer (partition-writer odd? '(1 2 3 4 5 6 7 8 9 10)))

(define powerXpartials
  (lambda (x n)
    (cond
      [(zero? n) (inj-writer 1)]
      [(zero? (sub1 n)) (inj-writer x)]
      [(odd? n)
       (go-on (rst <- (powerXpartials x (sub1 n)))
               (dan-friedman <- (tell rst))
         (inj-writer (* x rst)))]
      [(even? n)
       (go-on
        (y <- (powerXpartials x (/ n 2)))
               (dan-friedman <- (tell y))
         (inj-writer (* y y)))])))


(run-writer (powerXpartials 2 6))
(run-writer (powerXpartials 3 5))
(run-writer (powerXpartials 5 7))

(define (replace-with-count s tr)
  (match tr
    [`,y #:when (symbol? y)
         (go-on (dan-friedman <- (get))
                 (weixi-ma <- (put (if (eqv? s y)
                                    (add1 dan-friedman)
                                    dan-friedman)))
           (inj-state (if (eqv? s y) `(,dan-friedman . ,y))))]
    [`(,a . ,d)
     (go-on (aa <- (replace-with-count s a))
             (dd <- (replace-with-count s d))
       (inj-state `(,aa . ,dd)))]))

((run-state (replace-with-count 'o '(a o (t o (e o t ((n . m) . o) . f) . t) . r))) 0)
((run-state (replace-with-count 'o '(((h (i s . o) . a) o s o e . n) . m))) 0)
((run-state (replace-with-count 'o '(o (h (o s . o) . o) . o))) 1)



